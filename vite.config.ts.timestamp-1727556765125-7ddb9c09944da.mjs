// vite.config.ts
import { defineConfig } from "file:///C:/Users/funnybobby/Desktop/Projets/lazy-smart-ui-lib/node_modules/vite/dist/node/index.js";
import dts from "file:///C:/Users/funnybobby/Desktop/Projets/lazy-smart-ui-lib/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.2.0"
};

// vite.config.ts
var vite_config_default = defineConfig({
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: "./setupTests.ts"
  },
  build: {
    lib: {
      entry: "./src/index.ts",
      // Specifies the entry point for building the library.
      name: "lazy-smart-ui-lib",
      // Sets the name of the generated library.
      fileName: (format) => `index.${format}.js`,
      // Generates the output file name based on the format.
      formats: ["cjs", "es"]
      // Specifies the output formats (CommonJS and ES modules).
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
      // Defines external dependencies for Rollup bundling.
    },
    sourcemap: true,
    // Generates source maps for debugging.
    emptyOutDir: true
    // Clears the output directory before building.
  },
  plugins: [dts()]
  // Uses the 'vite-plugin-dts' plugin for generating TypeScript declaration files (d.ts).
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcZnVubnlib2JieVxcXFxEZXNrdG9wXFxcXFByb2pldHNcXFxcbGF6eS1zbWFydC11aS1saWJcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGZ1bm55Ym9iYnlcXFxcRGVza3RvcFxcXFxQcm9qZXRzXFxcXGxhenktc21hcnQtdWktbGliXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9mdW5ueWJvYmJ5L0Rlc2t0b3AvUHJvamV0cy9sYXp5LXNtYXJ0LXVpLWxpYi92aXRlLmNvbmZpZy50c1wiOy8vLyA8cmVmZXJlbmNlIHR5cGVzPVwidml0ZXN0XCIgLz5cclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XHJcbmltcG9ydCB7IHBlZXJEZXBlbmRlbmNpZXMgfSBmcm9tIFwiLi9wYWNrYWdlLmpzb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgdGVzdDoge1xyXG4gICAgZ2xvYmFsczogdHJ1ZSxcclxuICAgIGVudmlyb25tZW50OiBcImpzZG9tXCIsXHJcbiAgICBzZXR1cEZpbGVzOiBcIi4vc2V0dXBUZXN0cy50c1wiLFxyXG4gIH0sXHJcbiAgYnVpbGQ6IHtcclxuICAgIGxpYjoge1xyXG4gICAgICBlbnRyeTogXCIuL3NyYy9pbmRleC50c1wiLCAvLyBTcGVjaWZpZXMgdGhlIGVudHJ5IHBvaW50IGZvciBidWlsZGluZyB0aGUgbGlicmFyeS5cclxuICAgICAgbmFtZTogXCJsYXp5LXNtYXJ0LXVpLWxpYlwiLCAvLyBTZXRzIHRoZSBuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgbGlicmFyeS5cclxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBpbmRleC4ke2Zvcm1hdH0uanNgLCAvLyBHZW5lcmF0ZXMgdGhlIG91dHB1dCBmaWxlIG5hbWUgYmFzZWQgb24gdGhlIGZvcm1hdC5cclxuICAgICAgZm9ybWF0czogW1wiY2pzXCIsIFwiZXNcIl0sIC8vIFNwZWNpZmllcyB0aGUgb3V0cHV0IGZvcm1hdHMgKENvbW1vbkpTIGFuZCBFUyBtb2R1bGVzKS5cclxuICAgIH0sXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyldLCAvLyBEZWZpbmVzIGV4dGVybmFsIGRlcGVuZGVuY2llcyBmb3IgUm9sbHVwIGJ1bmRsaW5nLlxyXG4gICAgfSxcclxuICAgIHNvdXJjZW1hcDogdHJ1ZSwgLy8gR2VuZXJhdGVzIHNvdXJjZSBtYXBzIGZvciBkZWJ1Z2dpbmcuXHJcbiAgICBlbXB0eU91dERpcjogdHJ1ZSwgLy8gQ2xlYXJzIHRoZSBvdXRwdXQgZGlyZWN0b3J5IGJlZm9yZSBidWlsZGluZy5cclxuICB9LFxyXG4gIHBsdWdpbnM6IFtkdHMoKV0sIC8vIFVzZXMgdGhlICd2aXRlLXBsdWdpbi1kdHMnIHBsdWdpbiBmb3IgZ2VuZXJhdGluZyBUeXBlU2NyaXB0IGRlY2xhcmF0aW9uIGZpbGVzIChkLnRzKS5cclxufSk7XHJcbiIsICJ7XHJcbiAgXCJuYW1lXCI6IFwibGF6eS1zbWFydC11aS1saWJcIixcclxuICBcInZlcnNpb25cIjogXCIwLjAuMVwiLFxyXG4gIFwiZGVzY3JpcHRpb25cIjogXCJMYXp5IHNtYXJ0IFVpIGxpYnJhcnlcIixcclxuICBcInNjcmlwdHNcIjoge1xyXG4gICAgXCJmb3JtYXRcIjogXCJwcmV0dGllciAtLXdyaXRlIC0tcGFyc2VyIHR5cGVzY3JpcHQgJyoqLyoue3RzLHRzeH0nXCIsXHJcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCAudHMsLnRzeCAtLWlnbm9yZS1wYXRoIC5naXRpZ25vcmUgLS1maXhcIixcclxuICAgIFwiYnVpbGRcIjogXCJ0c2MgJiYgdml0ZSBidWlsZFwiLFxyXG4gICAgXCJ0ZXN0XCI6IFwidml0ZXN0IHJ1blwiLFxyXG4gICAgXCJ0ZXN0LXdhdGNoXCI6IFwidml0ZXN0XCIsXHJcbiAgICBcInRlc3Q6dWlcIjogXCJ2aXRlc3QgLS11aVwiLFxyXG4gICAgXCJzdG9yeWJvb2tcIjogXCJzdG9yeWJvb2sgZGV2IC1wIDYwMDZcIixcclxuICAgIFwiYnVpbGQtc3Rvcnlib29rXCI6IFwic3Rvcnlib29rIGJ1aWxkXCIsXHJcbiAgICBcInByZXBhcmVcIjogXCJucG0gcnVuIGJ1aWxkXCJcclxuICB9LFxyXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxyXG4gIFwibWFpblwiOiBcImRpc3QvaW5kZXguY2pzLmpzXCIsXHJcbiAgXCJtb2R1bGVcIjogXCJkaXN0L2luZGV4LmVzLmpzXCIsXHJcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxyXG4gIFwiZmlsZXNcIjogW1xyXG4gICAgXCIvZGlzdFwiXHJcbiAgXSxcclxuICBcInJlcG9zaXRvcnlcIjoge1xyXG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXHJcbiAgICBcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vZnVubnlib2JieTIvbGF6eS1zbWFydC11aS1saWIuZ2l0XCJcclxuICB9LFxyXG4gIFwia2V5d29yZHNcIjogW1xyXG4gICAgXCJVSVwiLFxyXG4gICAgXCJSZWFjdFwiLFxyXG4gICAgXCJsaWJyYXJ5XCIsXHJcbiAgICBcIlN0b3J5Ym9va1wiXHJcbiAgXSxcclxuICBcImF1dGhvclwiOiBcIkZ1bm55Ym9iYnlcIixcclxuICBcImxpY2Vuc2VcIjogXCJJU0NcIixcclxuICBcImJ1Z3NcIjoge1xyXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZnVubnlib2JieTIvbGF6eS1zbWFydC11aS1saWIvaXNzdWVzXCJcclxuICB9LFxyXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZnVubnlib2JieTIvbGF6eS1zbWFydC11aS1saWIjcmVhZG1lXCIsXHJcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLWVzc2VudGlhbHNcIjogXCJeNy40LjFcIixcclxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1pbnRlcmFjdGlvbnNcIjogXCJeNy40LjFcIixcclxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1saW5rc1wiOiBcIl43LjQuMVwiLFxyXG4gICAgXCJAc3Rvcnlib29rL2FkZG9uLW9uYm9hcmRpbmdcIjogXCJeMS4wLjhcIixcclxuICAgIFwiQHN0b3J5Ym9vay9ibG9ja3NcIjogXCJeNy40LjFcIixcclxuICAgIFwiQHN0b3J5Ym9vay9yZWFjdFwiOiBcIl43LjQuMVwiLFxyXG4gICAgXCJAc3Rvcnlib29rL3JlYWN0LXZpdGVcIjogXCJeNy40LjFcIixcclxuICAgIFwiQHN0b3J5Ym9vay90ZXN0aW5nLWxpYnJhcnlcIjogXCJeMC4yLjBcIixcclxuICAgIFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbVwiOiBcIl42LjEuM1wiLFxyXG4gICAgXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI6IFwiXjE0LjAuMFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi4yMVwiLFxyXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOiBcIl42LjcuMFwiLFxyXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjYuNy4wXCIsXHJcbiAgICBcImVzbGludFwiOiBcIl44LjQ5LjBcIixcclxuICAgIFwiZXNsaW50LWNvbmZpZy1wcmV0dGllclwiOiBcIl45LjAuMFwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLXByZXR0aWVyXCI6IFwiXjUuMC4wXCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3RcIjogXCJeNy4zMy4yXCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcclxuICAgIFwiZXNsaW50LXBsdWdpbi1zdG9yeWJvb2tcIjogXCJeMC42LjEzXCIsXHJcbiAgICBcImh1c2t5XCI6IFwiXjguMC4zXCIsXHJcbiAgICBcImpzZG9tXCI6IFwiXjIyLjEuMFwiLFxyXG4gICAgXCJsaW50LXN0YWdlZFwiOiBcIl4xNC4wLjFcIixcclxuICAgIFwicHJldHRpZXJcIjogXCJeMy4wLjNcIixcclxuICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcclxuICAgIFwic3Rvcnlib29rXCI6IFwiXjcuNC4xXCIsXHJcbiAgICBcInN0eWxlZC1jb21wb25lbnRzXCI6IFwiXjYuMC43XCIsXHJcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4yLjJcIixcclxuICAgIFwidml0ZVwiOiBcIl40LjQuOVwiLFxyXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMy41LjNcIixcclxuICAgIFwidml0ZXN0XCI6IFwiXjAuMzQuNFwiXHJcbiAgfSxcclxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIlxyXG4gIH0sXHJcbiAgXCJsaW50LXN0YWdlZFwiOiB7XHJcbiAgICBcIioue3RzLHRzeH1cIjogW1xyXG4gICAgICBcIm5wbSBydW4gZm9ybWF0XCIsXHJcbiAgICAgIFwibnBtIHJ1biBsaW50XCIsXHJcbiAgICAgIFwibnBtIHJ1biB0ZXN0XCJcclxuICAgIF1cclxuICB9LFxyXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwibm9kZVwiOiBcIjE4LjE3XCJcclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUNBLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUzs7O0FDcUVkLHVCQUFvQjtBQUFBLEVBQ2xCLE9BQVM7QUFDWDs7O0FEcEVGLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLE1BQU07QUFBQSxJQUNKLFNBQVM7QUFBQSxJQUNULGFBQWE7QUFBQSxJQUNiLFlBQVk7QUFBQSxFQUNkO0FBQUEsRUFDQSxPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsTUFDSCxPQUFPO0FBQUE7QUFBQSxNQUNQLE1BQU07QUFBQTtBQUFBLE1BQ04sVUFBVSxDQUFDLFdBQVcsU0FBUyxNQUFNO0FBQUE7QUFBQSxNQUNyQyxTQUFTLENBQUMsT0FBTyxJQUFJO0FBQUE7QUFBQSxJQUN2QjtBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFLLGdCQUFnQixDQUFDO0FBQUE7QUFBQSxJQUM3QztBQUFBLElBQ0EsV0FBVztBQUFBO0FBQUEsSUFDWCxhQUFhO0FBQUE7QUFBQSxFQUNmO0FBQUEsRUFDQSxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQUE7QUFDakIsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
